{"version":3,"sources":["Holdingtable.js","App.js","reportWebVitals.js","index.js"],"names":["Holdingtable","TabPane","Tabs","callback","key","console","log","App","useState","transdata","settransdata","holdingdata","setholdingdata","useEffect","a","axios","get","then","res","data","transactions","transaction","payload","holding","className","defaultActiveKey","onChange","tab","pagination","position","columns","title","dataIndex","dataSource","bordered","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8QAkTeA,I,mCC3SPC,EAAYC,IAAZD,QAER,SAASE,EAASC,GAChBC,QAAQC,IAAIF,GAGC,SAASG,IAAO,IAAD,EACMC,qBADN,mBACrBC,EADqB,KACVC,EADU,OAEUF,qBAFV,mBAErBG,EAFqB,KAERC,EAFQ,KAO5BC,oBAAS,sBAAC,8BAAAC,EAAA,sEACkBC,IAAMC,IAHjB,4DAG+BC,MAAK,SAAAC,GAAG,OAAUA,EAAIC,KAAKC,gBADjE,cACFC,EADE,gBAEcN,IAAMC,IALX,wDAK2BC,MAAK,SAAAC,GAAG,OAAUA,EAAIC,KAAKG,WAF/D,OAEFC,EAFE,OAIRb,EAAa,YAAIW,IACjBT,EAAe,YAAIW,IAEnBlB,QAAQC,IAAIK,GAPJ,2CAQP,IAyEH,OACE,qBAAKa,UAAU,kBAAf,SACE,eAAC,IAAD,CAAMC,iBAAiB,IAAIC,SAAUvB,EAArC,UACE,cAACF,EAAD,CAAS0B,IAAI,qBAAb,SACE,cAAC,IAAD,CAAOC,WAAY,CAAEC,SAAU,CAAC,iBAAmBC,QA3EtC,CACnB,CACEC,MAAO,OACPC,UAAW,OACX5B,IAAK,QAEP,CACE2B,MAAO,aACPC,UAAW,YACX5B,IAAK,aAEP,CACE2B,MAAO,cACPC,UAAW,YACX5B,IAAK,aAEP,CACE2B,MAAO,MACPC,UAAW,WACX5B,IAAK,YAEP,CACE2B,MAAO,WACPC,UAAW,WACX5B,IAAK,YAEP,CACE2B,MAAO,oBACPC,UAAW,oBACX5B,IAAK,sBA8CyE6B,WAAYxB,EAAWyB,UAAQ,KADrE,KAGtC,cAACjC,EAAD,CAAS0B,IAAI,gBAAb,SACE,cAAC,IAAD,CAAOC,WAAY,CAAEC,SAAU,CAAC,iBAAmBC,QA7CpC,CACrB,CACEC,MAAO,OACPC,UAAW,OACX5B,IAAK,QAEP,CACE2B,MAAO,SACPC,UAAW,SACX5B,IAAK,UAEP,CACE2B,MAAO,cACPC,UAAW,cACX5B,IAAK,eAEP,CACE2B,MAAO,gBACPC,UAAW,YACX5B,IAAK,aAEP,CACE2B,MAAO,eACPC,UAAW,eACX5B,IAAK,gBAEP,CACE2B,MAAO,2BACPC,UAAW,iBACX5B,IAAK,kBAEP,CACE2B,MAAO,mBACPC,UAAW,mBACX5B,IAAK,qBAW2E6B,WAAYtB,EAAauB,UAAQ,KAD9E,UC3GzC,IAYeC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBpB,MAAK,YAAkD,IAA/CqB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,OCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.c64f45d2.chunk.js","sourcesContent":["import {\n  useTable,\n  useSortBy,\n  usePagination,\n  useColumnOrder,\n} from \"react-table\";\nimport React from \"react\";\n\nfunction shuffle(arr) {\n  arr = [...arr];\n  const shuffled = [];\n  while (arr.length) {\n    const rand = Math.floor(Math.random() * arr.length);\n    shuffled.push(arr.splice(rand, 1)[0]);\n  }\n  return shuffled;\n}\nfunction Table({\n  columns,\n  data,\n  fetchData,\n  loading,\n  pageCount: controlledPageCount,\n}) {\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page,\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    visibleColumns,\n    previousPage,\n    setPageSize,\n    state: { pageIndex, pageSize },\n    setColumnOrder,\n  } = useTable(\n    {\n      columns,\n      data,\n      initialState: { pageIndex: 0, pageSize: 10 },\n      manualPagination: true,\n      pageCount: controlledPageCount,\n    },\n    useSortBy,\n    useColumnOrder,\n    usePagination\n  );\n\n  const originalOrder = () => {\n    setColumnOrder([\n      \"name\",\n      \"ticker\",\n      \"asset_class\",\n      \"avg_price\",\n      \"market_price\",\n      \"latest_chg_pct\",\n      \"market_value_ccy\",\n    ]);\n  };\n\n  const changeOrder = () => {\n    setColumnOrder([\n      \"name\",\n      \"ticker\",\n      \"avg_price\",\n      \"market_price\",\n      \"latest_chg_pct\",\n      \"asset_class\",\n      \"market_value_ccy\",\n    ]);\n  };\n  const randomizeColumns = () => {\n    setColumnOrder(shuffle(visibleColumns.map((d) => d.id)));\n  };\n\n  React.useEffect(() => {\n    fetchData({ pageIndex, pageSize });\n  }, [fetchData, pageIndex, pageSize]);\n\n  return (\n    <>\n      <button type=\"button\" className=\"btn btn-primary\" onClick={originalOrder}>\n        Original Column order\n      </button>\n      <button type=\"button\" className=\"btn btn-primary\" onClick={changeOrder}>\n        Important Column order\n      </button>\n      <button\n        type=\"button\"\n        className=\"btn btn-primary\"\n        onClick={() => randomizeColumns({})}\n      >\n        Random Columns\n      </button>\n      <table {...getTableProps()} className=\"table table-bordered\">\n        <thead>\n          {headerGroups.map((headerGroup) => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map((column) => (\n                <th\n                  {...column.getHeaderProps(column.getSortByToggleProps())}\n                  scope=\"col\"\n                >\n                  {column.render(\"Header\")}\n                  <span>\n                    {column.isSorted\n                      ? column.isSortedDesc\n                        ? \" ðŸ”½\"\n                        : \" ðŸ”¼\"\n                      : \"\"}\n                  </span>\n                </th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {page.map((row, i) => {\n            prepareRow(row);\n            return (\n              <tr {...row.getRowProps()}>\n                {row.cells.map((cell) => {\n                  return (\n                    <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>\n                  );\n                })}\n              </tr>\n            );\n          })}\n          <tr>\n            {loading ? (\n              <td colSpan=\"10000\">Loading...</td>\n            ) : (\n              <td colSpan=\"10000\" className=\"text-center\">\n                Showing {page.length} of ~{controlledPageCount * pageSize}{\" \"}\n                results\n              </td>\n            )}\n          </tr>\n        </tbody>\n      </table>\n\n      <div className=\"pagination\">\n        <button\n          type=\"button\"\n          className=\"btn btn-primary\"\n          onClick={() => gotoPage(0)}\n          disabled={!canPreviousPage}\n        >\n          {\"<<\"}\n        </button>{\" \"}\n        <button\n          type=\"button\"\n          className=\"btn btn-primary\"\n          onClick={() => previousPage()}\n          disabled={!canPreviousPage}\n        >\n          {\"<\"}\n        </button>{\" \"}\n        <span>\n          Page{\" \"}\n          <strong>\n            {pageIndex + 1} of {pageOptions.length}\n          </strong>{\" \"}\n        </span>\n        <button\n          type=\"button\"\n          className=\"btn btn-primary\"\n          onClick={() => nextPage()}\n          disabled={!canNextPage}\n        >\n          {\">\"}\n        </button>{\" \"}\n        <button\n          type=\"button\"\n          className=\"btn btn-primary\"\n          onClick={() => gotoPage(pageCount - 1)}\n          disabled={!canNextPage}\n        >\n          {\">>\"}\n        </button>{\" \"}\n        <div style={{ display: \"none\" }}>\n          <span>\n            | Go to page:{\" \"}\n            <input\n              type=\"number\"\n              defaultValue={pageIndex + 1}\n              onChange={(e) => {\n                const page = e.target.value ? Number(e.target.value) - 1 : 0;\n                gotoPage(page);\n              }}\n              style={{ width: \"100px\" }}\n            />\n          </span>\n          <select\n            value={pageSize}\n            onChange={(e) => {\n              setPageSize(Number(e.target.value));\n            }}\n          >\n            {[10, 20, 30, 40, 50].map((pageSize) => (\n              <option key={pageSize} value={pageSize}>\n                Show {pageSize}\n              </option>\n            ))}\n          </select>\n        </div>\n      </div>\n    </>\n  );\n}\n\nfunction Holdingtable() {\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: \"Name of the holding\",\n        accessor: \"name\",\n      },\n      {\n        Header: \"Ticker\",\n        accessor: \"ticker\",\n      },\n      {\n        Header: \"The asset class it belongs to\",\n        accessor: \"asset_class\",\n      },\n      {\n        Header: \"Average price\",\n        accessor: \"avg_price\",\n      },\n      {\n        Header: \"Market Price\",\n        accessor: \"market_price\",\n      },\n      {\n        Header: \"Latest change percentage\",\n        accessor: \"latest_chg_pct\",\n      },\n      {\n        Header: \"Market Value in Base CCY\",\n        accessor: \"market_value_ccy\",\n      },\n    ],\n    []\n  );\n\n  const [data, setData] = React.useState([]);\n  const [holdData, setHolddata] = React.useState([]);\n  const [loading, setLoading] = React.useState(false);\n  const [pageCount, setPageCount] = React.useState(0);\n  const fetchIdRef = React.useRef(0);\n  \n\n  React.useEffect(() => {\n    setLoading(true);\n    async function gettransdata() {\n      const response = await fetch(\n        \"https://canopy-frontend-task.vercel.app/api/holdings\"\n      );\n      const data = await response.json();\n      const holding = data.payload;\n      setHolddata(holding);\n    }\n    gettransdata();\n\n    console.log(holdData);\n    setLoading(false);\n  }, [holdData]);\n\n  const fetchData = React.useCallback(({ pageSize, pageIndex }) => {\n    const fetchId = ++fetchIdRef.current;\n\n    setLoading(true);\n\n    setTimeout(() => {\n      if (fetchId === fetchIdRef.current) {\n        const startRow = pageSize * pageIndex;\n        const endRow = startRow + pageSize;\n        setData(holdData.slice(startRow, endRow));\n\n        setPageCount(Math.ceil(holdData.length / pageSize));\n\n        setLoading(false);\n      }\n    }, 1000);\n  }, []);\n  \n  return (\n   \n        <Table\n          columns={columns}\n          data={data}\n          fetchData={fetchData}\n          loading={loading}\n          pageCount={pageCount}\n        />\n  );\n}\n\nexport default Holdingtable;\n","import Transtable from \"./Transtable\";\nimport Holdingtable from \"./Holdingtable\";\nimport \"./App.css\";\nimport { Tabs, Table } from 'antd';\nimport React, { useState, useEffect } from 'react'\nimport axios from \"axios\";\n\nconst { TabPane } = Tabs;\n\nfunction callback(key) {\n  console.log(key);\n}\n\nexport default function App() {\n  const [transdata, settransdata] = useState()\n  const [holdingdata, setholdingdata] = useState()\n\n  const holdingURL = \"https://canopy-frontend-task.vercel.app/api/holdings\"\n  const transURL = \"https://canopy-frontend-task.vercel.app/api/transactions\"\n\n  useEffect(async () => {\n    const transaction = await axios.get(transURL).then(res => res = res.data.transactions)\n    const holding = await axios.get(holdingURL).then(res => res = res.data.payload)\n\n    settransdata([...transaction])\n    setholdingdata([...holding])\n\n    console.log(holdingdata)\n  }, [])\n\n  const transcolumns = [\n    {\n      title: 'Name',\n      dataIndex: 'name',\n      key: 'name',\n    },\n    {\n      title: 'Ticket Ref',\n      dataIndex: 'ticketref',\n      key: 'ticketref',\n    },\n    {\n      title: 'Traded Date',\n      dataIndex: 'traded_on',\n      key: 'traded_on',\n    },\n    {\n      title: 'QTY',\n      dataIndex: 'quantity',\n      key: 'quantity',\n    },\n    {\n      title: 'Currency',\n      dataIndex: 'currency',\n      key: 'currency',\n    },\n    {\n      title: 'Settlement Amount',\n      dataIndex: 'settlement_amount',\n      key: 'settlement_amount',\n    },\n  ]\n\n  const holdingcolumns = [\n    {\n      title: 'Name',\n      dataIndex: 'name',\n      key: 'name',\n    },\n    {\n      title: 'Ticker',\n      dataIndex: 'ticker',\n      key: 'ticker',\n    },\n    {\n      title: 'Asset Class',\n      dataIndex: 'asset_class',\n      key: 'asset_class',\n    },\n    {\n      title: 'Average Price',\n      dataIndex: 'avg_price',\n      key: 'avg_price',\n    },\n    {\n      title: 'Market Price',\n      dataIndex: 'market_price',\n      key: 'market_price',\n    },\n    {\n      title: 'Latest Percentage Change',\n      dataIndex: 'latest_chg_pct',\n      key: 'latest_chg_pct',\n    },\n    {\n      title: 'Market value CCY',\n      dataIndex: 'market_value_ccy',\n      key: 'market_value_ccy',\n    },\n  ]\n\n  return (\n    <div className=\"app text-center\">\n      <Tabs defaultActiveKey=\"1\" onChange={callback}>\n        <TabPane tab=\"Transactions Table\" key=\"1\">\n          <Table pagination={{ position: ['bottomCenter'] }} columns={transcolumns} dataSource={transdata} bordered />\n        </TabPane>\n        <TabPane tab=\"Holding Table\" key=\"2\">\n          <Table pagination={{ position: ['bottomCenter'] }} columns={holdingcolumns} dataSource={holdingdata} bordered />\n        </TabPane>\n      </Tabs>\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'antd/dist/antd.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}